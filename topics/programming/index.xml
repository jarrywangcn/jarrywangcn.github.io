<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>99 problems</title>
    <link>https://jarrywangcn.github.io/topics/programming/index.xml</link>
    <description>Recent content on 99 problems</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <atom:link href="https://jarrywangcn.github.io/topics/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>使用python下载instagram图片（中国大陆）</title>
      <link>https://jarrywangcn.github.io/post/download_from_instagram/</link>
      <pubDate>Sat, 21 Jan 2017 20:47:56 +0800</pubDate>
      
      <guid>https://jarrywangcn.github.io/post/download_from_instagram/</guid>
      <description>

&lt;h1 id=&#34;0&#34;&gt;0.&lt;/h1&gt;

&lt;p&gt;本科毕业论文做的是默克尔和奥巴马instagram形象对比分析，当年半点程序背景都没有（拿chrome查看源代码找图片链接到是会的）但instagram似乎挺不支持这个行为，源代码里都找不到图片地址。所以，当初我手动截图（加排序）了两个人官方账号里的所有图片。&lt;/p&gt;

&lt;p&gt;所以，稍微学习了一点编程就想把这件事实现了。&lt;/p&gt;

&lt;h1 id=&#34;1-instaraider-instalooter&#34;&gt;1. instaRaider &amp;amp; instaLooter&lt;/h1&gt;

&lt;p&gt;谷歌搜索了下，发现已经有人造好了轮子&lt;a href=&#34;https://github.com/akurtovic/InstaRaider&#34;&gt;instaRaider&lt;/a&gt;，而且把怎么造轮子的过程都写清楚了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amirkurtovic.com/blog/how-to-download-photos-from-instagram-a-hack/&#34;&gt;How to download photos from Instagram – A Hack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个项目吸引我的地方是它不需要instagram的api，所以也不需要授权(authentication)。&lt;/p&gt;

&lt;p&gt;但这个项目已经停止维护了，instaRaider的作者在readme里推荐了另一个项目&lt;a href=&#34;https://github.com/althonos/InstaLooter&#34;&gt;instaLooter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当我看到instaLooter的readme里使用方式只有两行代码时我的内心好喜悦啊&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ instaLooter &amp;lt;username&amp;gt; &amp;lt;directory&amp;gt; [options]
$ instaLooter hashtag &amp;lt;hashtag&amp;gt; &amp;lt;directory&amp;gt; [options]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就报错了&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;requests.exceptions.ConnectionError: HTTPSConnectionPool(host=&#39;www.instagram.com&#39;, port=443): Max retries exceeded with url: /jarrywan9/ (Caused by NewConnectionError(&#39;&amp;lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x10402a4d0&amp;gt;: Failed to establish a new connection: [Errno 65] No route to host&#39;,))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;原因是我instagram在国内被封了&amp;hellip;而我翻墙走的是shadowsocks&lt;/p&gt;

&lt;h1 id=&#34;2-利用proxychains解决shadowsocks非全局代理问题&#34;&gt;2. 利用proxychains解决shadowsocks非全局代理问题&lt;/h1&gt;

&lt;p&gt;下面开始感恩前室友小讲堂：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;代理通常分两步：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;把线路搞起来 e.g. shadowsocks或vpn&lt;/li&gt;
&lt;li&gt;让程序流量走这个线路&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;代理可分为全局代理和非全局代理。&lt;/p&gt;

&lt;p&gt;全局代理是全部程序的流量都走代理，譬如通常的vpn。&lt;/p&gt;

&lt;p&gt;而shadowsocks是非全局的，默认是连上之后本地开一个服务端口 譬如1080，然后通常把浏览器流量设置到走这个端口。ss本质是一个socks5服务，需要监听一个本地端口，这个就是ss服务跑起来以后在你机器上面的服务端口(其他程序譬如浏览器会把流量发到这个端口，由ss发到境外服务器）（我目前用的shadowsocks软件是shadowsocksx2，端口是写死了的1080）&lt;/p&gt;

&lt;p&gt;解决方案有两个：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;用一个全局的翻墙方案 譬如vpn 这样这个python脚本的流量默认翻墙了&lt;/li&gt;
&lt;li&gt;仍然是shadowsocks 不过设置程序流量走ss这个服务端口&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;// 考虑第二个方案的实现成本比让前室友重新设置个vpn给我低一些 所以选择了方案二）&lt;/p&gt;

&lt;p&gt;此时，要用到另外一个轮子 &lt;a href=&#34;https://github.com/haad/proxychains&#34;&gt;proxychains&lt;/a&gt;,
设置方法参照了&lt;a href=&#34;http://www.tuicool.com/articles/rUNFF3&#34;&gt;利用proxychains在终端使用socks5代理&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# proxychains安装
git clone https://github.com/rofl0r/proxychains-ng.git
cd proxychains-ng
./configure
make &amp;amp;&amp;amp; make install
cp ./src/proxychains.conf /etc/proxychians.conf
cd .. &amp;amp;&amp;amp; rm -rf proxychains-ng

# 编辑proxychains配置
# 需要学习下vim的操作，配置文件修改需要管理员权限 mac环境下前面加sudo
vim /etc/proxychains.conf

# 将socks4 127.0.0.1 9095改为
socks5  127.0.0.1 1080  //1080改为你自己的端口

# 在需要代理的命令前加上 proxychains4，如：
proxychains4 instaLooter jarrywan9 ./Downloads/jarrywan9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其他需要注意的一些事情：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;每个轮子都有Requirements，要确认下是否都安装了&lt;/li&gt;
&lt;li&gt;proxychains用$ brew install proxychains 也可以安装，我是brew刚好需要更新，但死也更新不了&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;4-总结&#34;&gt;4. 总结&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;学习编程时要尝试解决实际问题&lt;/li&gt;
&lt;li&gt;有轮子的时候就用轮子，避免重复劳动（虽然现在我也写不出&amp;hellip;）&lt;/li&gt;
&lt;li&gt;开源项目的readme要认真写，&lt;a href=&#34;https://github.com/althonos/InstaLooter&#34;&gt;instaLooter&lt;/a&gt;的小哥readme和代码写的都很干净&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最后晒一张成果 instagram@will_yinan&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ohvamo1vj.bkt.clouddn.com/Screen%20Shot%202017-01-21%20at%209.58.43%20PM.png&#34; alt=&#34;will_yinan&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用七牛云&#43;dropzone在静态博客中插入图片</title>
      <link>https://jarrywangcn.github.io/post/upload_photos/</link>
      <pubDate>Thu, 08 Dec 2016 20:21:25 +0800</pubDate>
      
      <guid>https://jarrywangcn.github.io/post/upload_photos/</guid>
      <description>

&lt;p&gt;用wordpress, medium之类的博客服务，想要在文章中插入图片，网站有自己的服务器可以上传图片。如果自己架设网站，就需要把照片上传到互联网，获取网址，才能利用markdown语法在文章中插入图片。&lt;/p&gt;

&lt;p&gt;可以选择例如flickr这样的网络相册（会提供照片外链网址），考虑到flickr已经被墙了，遂放弃，也不想为此重新注册一个网络相册。&lt;/p&gt;

&lt;p&gt;也可以选择例如七牛、github，把图片上传到服务器，获得外链。本来想选github后来听说官方不支持这种用法，外加看到一篇使用七牛云+dropzone拖拽上传图片自动复制外链到剪贴板的&lt;a href=&#34;http://yansu.org/2015/01/10/use-dropzone-and-qiniu-to-store-blog-images.html&#34;&gt;文章&lt;/a&gt;，就决定使用七牛云。&lt;/p&gt;

&lt;h3 id=&#34;操作步骤&#34;&gt;操作步骤&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;注册七牛云，并创建存储空间&lt;/li&gt;
&lt;li&gt;在appstore上购买dropzone 3 (12人民币)，再去官网下载沙箱版&lt;a href=&#34;https://aptonic.com&#34;&gt;dropzone3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在&lt;a href=&#34;https://aptonic.com/actions/untested&#34;&gt;untested action&lt;/a&gt;中选择qiniu插件install&lt;/li&gt;
&lt;li&gt;配置插件，操作见&lt;a href=&#34;http://yansu.org/2015/01/10/use-dropzone-and-qiniu-to-store-blog-images.html&#34;&gt;使用Dropzone和七牛优化博客图床&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;尝试拖拽上传文件，生成外链，使用⬇️(在第四步中选择了本地图片备份，在选择的目录下也出现了上传的文件)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://ohvamo1vj.bkt.clouddn.com/IMG_0919.JPG&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;压缩图片之后上传&#34;&gt;压缩图片之后上传&lt;/h2&gt;

&lt;p&gt;目前使用的是苹果的预览工具，想要在dropzone里实现&amp;hellip;&lt;/p&gt;

&lt;p&gt;苹果预览修改尺寸效果如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ohvamo1vj.bkt.clouddn.com/IMG_09190.JPG&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;update&#34;&gt;update&lt;/h3&gt;

&lt;p&gt;使用dropzone插件1024px，但感觉1024像素在博客中还是有些大，自己修改了代码调成800，缺陷是自动覆盖原文件，所以最好是先备份再压缩，但已经挺方便了，满足。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用hugo和github pages搭建个人博客</title>
      <link>https://jarrywangcn.github.io/post/buildnewblog/</link>
      <pubDate>Thu, 08 Dec 2016 17:16:37 +0800</pubDate>
      
      <guid>https://jarrywangcn.github.io/post/buildnewblog/</guid>
      <description>

&lt;p&gt;之前尝试过很多次搭建个人博客，看到Wilson Lee的网站使用format做portfolio，效果很棒，但收费挺高。买过几个域名，挺久之前买过jarry.wang 到期了也没用过一次，七月买了jarrywang.de。花了挺大功夫，自建博客很多人推荐用wordpress，但我觉得wordpress相当麻烦，很厚重，用了个其他的（忘记叫啥）。当时托管在亚马逊aws，创建instance解析ip地址又弄了很久，但还是搞定了。就是在网址上输入xx.xx.xx，能看到网页。死在了最后一步，把解析的ip地址和域名绑定，forward只能跳转，还是会显示ip地址。弄了三天左右，最后放弃了&amp;hellip;&lt;/p&gt;

&lt;p&gt;今天下午弄了四个小时，就全部搞定了。方法是用hugo搭建网站，托管在github pages上，github会自动生成一个可访问的网站 &lt;code&gt;your_username.github.io&lt;/code&gt;，在域名管理中加入三个DNS设置，要在project中加一个文件。&lt;/p&gt;

&lt;p&gt;现在每次更新是先创建一个markdown文件，run hugo生成public文件夹，用git推送到在github托管的项目（目前用的是source tree，一款gui方式使用git的软件）。&lt;/p&gt;

&lt;p&gt;总结：&lt;/p&gt;

&lt;p&gt;今天弄的这么顺利和这两个月学会的命令行、git、github起到了很大的作用。如果是之前只会用gui的话，可能真的要被wordpress弄死！dependency很重要！&lt;/p&gt;

&lt;p&gt;这两个月也习惯了看文档学东西，今天除了有些用户写的中文教程还看hugo的文档，碰到bug学会查stackoverflow，还去hugo的community里问了&amp;hellip; 感天动地！&lt;/p&gt;

&lt;h3 id=&#34;参考链接&#34;&gt;参考链接：&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.coderzh.com/2015/08/29/hugo/&#34;&gt;使用hugo搭建个人博客站点&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/31377141/answer/103056861&#34;&gt;github怎么绑定自己的域名&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>